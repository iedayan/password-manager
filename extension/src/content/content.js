/**
 * Main content script for Lok Password Manager
 * Coordinates form detection, auto-fill, and UI interactions
 */

class LokContentScript {
  constructor() {
    this.API_BASE = 'https://password-manager-production-89ed.up.railway.app';
    this.currentDomain = window.location.hostname;
    this.detectedForms = new Map();
    this.isAuthenticated = false;
    
    this.init();
  }
  
  async init() {
    // Check authentication status
    await this.checkAuthStatus();
    
    // Initialize message listeners
    this.setupMessageListeners();
    
    // Initialize keyboard shortcuts
    this.setupKeyboardShortcuts();
    
    // Initialize context menu integration
    this.setupContextMenu();
    
    // Check for security warnings
    this.checkSiteSecurityStatus();
    
    console.log('Lok Password Manager extension loaded');
  }
  
  async checkAuthStatus() {
    try {
      const result = await chrome.storage.local.get(['authToken']);
      this.isAuthenticated = !!result.authToken;
      
      if (!this.isAuthenticated) {
        this.showAuthenticationPrompt();
      }
    } catch (error) {
      console.error('Failed to check auth status:', error);
    }
  }
  
  setupMessageListeners() {
    chrome.runtime.onMessage.addListener((message, sender, sendResponse) => {
      switch (message.action) {
        case 'fill_form':
          this.fillForm(message.data);
          sendResponse({ success: true });
          break;
          
        case 'show_credential_selector':
          this.showCredentialSelector(message.data);
          sendResponse({ success: true });
          break;
          
        case 'save_credentials':
          this.showSavePrompt(message.data);
          sendResponse({ success: true });
          break;
          
        case 'security_check':
          this.performSecurityCheck(message.data);
          sendResponse({ success: true });
          break;
          
        default:
          sendResponse({ success: false, error: 'Unknown action' });
      }\n      \n      return true;\n    });\n  }\n  \n  setupKeyboardShortcuts() {\n    document.addEventListener('keydown', (e) => {\n      // Ctrl/Cmd + Shift + L for auto-fill\n      if ((e.ctrlKey || e.metaKey) && e.shiftKey && e.key === 'L') {\n        e.preventDefault();\n        this.triggerAutoFill();\n      }\n      \n      // Ctrl/Cmd + Shift + V for vault\n      if ((e.ctrlKey || e.metaKey) && e.shiftKey && e.key === 'V') {\n        e.preventDefault();\n        this.openVault();\n      }\n    });\n  }\n  \n  setupContextMenu() {\n    document.addEventListener('contextmenu', (e) => {\n      const target = e.target;\n      \n      if (target.type === 'password' || target.type === 'email' || \n          (target.type === 'text' && this.isUsernameField(target))) {\n        // Store context for potential auto-fill\n        this.contextTarget = target;\n      }\n    });\n  }\n  \n  async triggerAutoFill() {\n    if (!this.isAuthenticated) {\n      this.showNotification('Please log in to use auto-fill', 'warning');\n      return;\n    }\n    \n    const credentials = await this.getCredentialsForCurrentSite();\n    \n    if (credentials.length === 0) {\n      this.showNotification('No credentials found for this site', 'warning');\n      return;\n    }\n    \n    if (credentials.length === 1) {\n      this.fillForm(credentials[0]);\n    } else {\n      this.showCredentialSelector(credentials);\n    }\n  }\n  \n  async getCredentialsForCurrentSite() {\n    try {\n      const token = await this.getAuthToken();\n      const response = await fetch(`${this.API_BASE}/api/v1/extension/credentials?domain=${this.currentDomain}`, {\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'Content-Type': 'application/json'\n        }\n      });\n      \n      if (response.ok) {\n        const data = await response.json();\n        return data.credentials || [];\n      }\n      \n      return [];\n    } catch (error) {\n      console.error('Failed to get credentials:', error);\n      return [];\n    }\n  }\n  \n  async getAuthToken() {\n    const result = await chrome.storage.local.get(['authToken']);\n    return result.authToken;\n  }\n  \n  fillForm(credentials) {\n    const forms = document.querySelectorAll('form');\n    let filled = false;\n    \n    forms.forEach(form => {\n      const usernameField = this.findUsernameField(form);\n      const passwordField = this.findPasswordField(form);\n      \n      if (usernameField && passwordField) {\n        this.fillField(usernameField, credentials.username);\n        this.fillField(passwordField, credentials.password);\n        filled = true;\n      }\n    });\n    \n    if (filled) {\n      this.showNotification('âœ“ Credentials filled successfully');\n    } else {\n      this.showNotification('No suitable form found', 'warning');\n    }\n  }\n  \n  fillField(field, value) {\n    // Focus the field\n    field.focus();\n    \n    // Clear existing value\n    field.value = '';\n    \n    // Set new value\n    field.value = value;\n    \n    // Trigger events for framework compatibility\n    const events = ['input', 'change', 'keyup', 'blur'];\n    events.forEach(eventType => {\n      field.dispatchEvent(new Event(eventType, { bubbles: true }));\n    });\n    \n    // Add visual feedback\n    field.style.borderColor = '#10b981';\n    field.style.boxShadow = '0 0 0 2px rgba(16, 185, 129, 0.2)';\n    \n    setTimeout(() => {\n      field.style.borderColor = '';\n      field.style.boxShadow = '';\n    }, 1000);\n  }\n  \n  findUsernameField(form) {\n    const selectors = [\n      'input[type=\"email\"]',\n      'input[autocomplete=\"username\"]',\n      'input[autocomplete=\"email\"]',\n      'input[name*=\"email\"]',\n      'input[name*=\"username\"]',\n      'input[name*=\"user\"]',\n      'input[id*=\"email\"]',\n      'input[id*=\"username\"]',\n      'input[id*=\"user\"]'\n    ];\n    \n    for (const selector of selectors) {\n      const field = form.querySelector(selector);\n      if (field && this.isVisible(field)) return field;\n    }\n    \n    // Fallback to first text input\n    const textInputs = form.querySelectorAll('input[type=\"text\"]');\n    for (const input of textInputs) {\n      if (this.isVisible(input)) return input;\n    }\n    \n    return null;\n  }\n  \n  findPasswordField(form) {\n    const passwordFields = form.querySelectorAll('input[type=\"password\"]');\n    for (const field of passwordFields) {\n      if (this.isVisible(field)) return field;\n    }\n    return null;\n  }\n  \n  isUsernameField(field) {\n    const name = (field.name || '').toLowerCase();\n    const id = (field.id || '').toLowerCase();\n    const autocomplete = (field.autocomplete || '').toLowerCase();\n    \n    return name.includes('email') || name.includes('username') || name.includes('user') ||\n           id.includes('email') || id.includes('username') || id.includes('user') ||\n           autocomplete.includes('email') || autocomplete.includes('username');\n  }\n  \n  isVisible(element) {\n    const style = window.getComputedStyle(element);\n    return style.display !== 'none' && \n           style.visibility !== 'hidden' && \n           style.opacity !== '0' &&\n           element.offsetWidth > 0 && \n           element.offsetHeight > 0;\n  }\n  \n  showCredentialSelector(credentials) {\n    // Remove existing selector\n    this.removeCredentialSelector();\n    \n    // Create overlay\n    const overlay = document.createElement('div');\n    overlay.className = 'lok-overlay';\n    overlay.onclick = () => this.removeCredentialSelector();\n    \n    // Create selector\n    const selector = document.createElement('div');\n    selector.className = 'lok-credential-selector';\n    selector.innerHTML = `\n      <div class=\"lok-credential-selector-header\">\n        <h3 class=\"lok-credential-selector-title\">Choose Account</h3>\n        <p class=\"lok-credential-selector-subtitle\">Select credentials for ${this.currentDomain}</p>\n      </div>\n      <div class=\"lok-credential-list\">\n        ${credentials.map(cred => `\n          <div class=\"lok-credential-item\" data-id=\"${cred.id}\">\n            <div class=\"lok-credential-icon\">\n              ${cred.site_name.charAt(0).toUpperCase()}\n            </div>\n            <div class=\"lok-credential-info\">\n              <div class=\"lok-credential-site\">${cred.site_name}</div>\n              <div class=\"lok-credential-username\">${cred.username}</div>\n            </div>\n          </div>\n        `).join('')}\n      </div>\n      <div class=\"lok-credential-selector-footer\">\n        <button class=\"lok-btn lok-btn-secondary\" onclick=\"document.querySelector('.lok-overlay').click()\">Cancel</button>\n        <button class=\"lok-btn lok-btn-primary\" onclick=\"window.open('${this.API_BASE.replace('password-manager-production-89ed.up.railway.app', 'comforting-sunshine-65105a.netlify.app')}')\">Open Vault</button>\n      </div>\n    `;\n    \n    // Add click handlers\n    selector.addEventListener('click', (e) => {\n      const item = e.target.closest('.lok-credential-item');\n      if (item) {\n        const credId = item.dataset.id;\n        const credential = credentials.find(c => c.id == credId);\n        if (credential) {\n          this.fillForm(credential);\n          this.removeCredentialSelector();\n        }\n      }\n    });\n    \n    document.body.appendChild(overlay);\n    document.body.appendChild(selector);\n  }\n  \n  removeCredentialSelector() {\n    const overlay = document.querySelector('.lok-overlay');\n    const selector = document.querySelector('.lok-credential-selector');\n    \n    if (overlay) overlay.remove();\n    if (selector) selector.remove();\n  }\n  \n  showSavePrompt(data) {\n    // Remove existing prompt\n    this.removeSavePrompt();\n    \n    const prompt = document.createElement('div');\n    prompt.className = 'lok-save-prompt';\n    prompt.innerHTML = `\n      <div class=\"lok-save-prompt-header\">\n        <h3 class=\"lok-save-prompt-title\">Save Password?</h3>\n        <p class=\"lok-save-prompt-subtitle\">Save credentials for ${this.currentDomain}</p>\n      </div>\n      <div class=\"lok-save-prompt-body\">\n        <div class=\"lok-save-prompt-field\">\n          <label class=\"lok-save-prompt-label\">Site Name</label>\n          <input class=\"lok-save-prompt-input\" type=\"text\" value=\"${data.siteName || this.currentDomain}\" id=\"lok-site-name\">\n        </div>\n        <div class=\"lok-save-prompt-field\">\n          <label class=\"lok-save-prompt-label\">Username</label>\n          <input class=\"lok-save-prompt-input\" type=\"text\" value=\"${data.username}\" id=\"lok-username\">\n        </div>\n      </div>\n      <div class=\"lok-save-prompt-footer\">\n        <button class=\"lok-btn lok-btn-secondary\" onclick=\"document.querySelector('.lok-save-prompt').remove()\">Not Now</button>\n        <button class=\"lok-btn lok-btn-primary\" id=\"lok-save-btn\">Save</button>\n      </div>\n    `;\n    \n    // Add save handler\n    prompt.querySelector('#lok-save-btn').onclick = () => {\n      this.saveCredentials({\n        siteName: prompt.querySelector('#lok-site-name').value,\n        username: prompt.querySelector('#lok-username').value,\n        password: data.password,\n        url: window.location.href,\n        domain: this.currentDomain\n      });\n      this.removeSavePrompt();\n    };\n    \n    document.body.appendChild(prompt);\n    \n    // Auto-remove after 10 seconds\n    setTimeout(() => this.removeSavePrompt(), 10000);\n  }\n  \n  removeSavePrompt() {\n    const prompt = document.querySelector('.lok-save-prompt');\n    if (prompt) prompt.remove();\n  }\n  \n  async saveCredentials(data) {\n    try {\n      const token = await this.getAuthToken();\n      const response = await fetch(`${this.API_BASE}/api/v1/passwords`, {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          site_name: data.siteName,\n          site_url: data.url,\n          username: data.username,\n          password: data.password\n        })\n      });\n      \n      if (response.ok) {\n        this.showNotification('âœ“ Credentials saved successfully');\n      } else {\n        throw new Error('Failed to save credentials');\n      }\n    } catch (error) {\n      console.error('Save credentials error:', error);\n      this.showNotification('Failed to save credentials', 'error');\n    }\n  }\n  \n  checkSiteSecurityStatus() {\n    // Check if site is using HTTPS\n    if (window.location.protocol !== 'https:' && window.location.hostname !== 'localhost') {\n      this.showSecurityIndicator('Insecure connection detected', 'danger');\n    }\n    \n    // Check for known phishing domains (basic check)\n    if (this.isPotentialPhishingSite()) {\n      this.showSecurityIndicator('Potential phishing site detected', 'danger');\n    }\n  }\n  \n  isPotentialPhishingSite() {\n    const suspiciousPatterns = [\n      /[0-9]+\\.[0-9]+\\.[0-9]+\\.[0-9]+/, // IP addresses\n      /[a-z]+-[a-z]+\\.(tk|ml|ga|cf)$/, // Suspicious TLDs\n      /(paypal|amazon|google|microsoft|apple).*\\.(tk|ml|ga|cf|xyz)$/i // Brand impersonation\n    ];\n    \n    return suspiciousPatterns.some(pattern => pattern.test(this.currentDomain));\n  }\n  \n  showSecurityIndicator(message, type = 'info') {\n    const indicator = document.createElement('div');\n    indicator.className = `lok-security-indicator ${type}`;\n    indicator.textContent = message;\n    \n    document.body.appendChild(indicator);\n    \n    setTimeout(() => {\n      if (indicator.parentNode) {\n        indicator.remove();\n      }\n    }, 5000);\n  }\n  \n  showNotification(message, type = 'success') {\n    // Remove existing notifications\n    const existing = document.querySelectorAll('.lok-notification');\n    existing.forEach(n => n.remove());\n    \n    const notification = document.createElement('div');\n    notification.className = `lok-notification ${type}`;\n    notification.textContent = message;\n    \n    document.body.appendChild(notification);\n    \n    setTimeout(() => {\n      if (notification.parentNode) {\n        notification.remove();\n      }\n    }, 3000);\n  }\n  \n  showAuthenticationPrompt() {\n    this.showNotification('Please log in to Lok to use auto-fill features', 'warning');\n  }\n  \n  openVault() {\n    window.open('https://comforting-sunshine-65105a.netlify.app', '_blank');\n  }\n  \n  performSecurityCheck(data) {\n    // Implement security checks like breach detection\n    console.log('Performing security check:', data);\n  }\n}\n\n// Initialize the content script\nif (document.readyState === 'loading') {\n  document.addEventListener('DOMContentLoaded', () => new LokContentScript());\n} else {\n  new LokContentScript();\n}